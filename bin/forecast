#!/usr/bin/env python2
# encoding: utf-8
#
# Copyright (c) 2016 Dean Jackson <deanishe@deanishe.net>
#
# MIT Licence. See http://opensource.org/licenses/MIT
#
# Created on 2016-12-26
#

"""Fetch weather forecast from darksky.net

An API token and location are required. Specify the API
token with --token or the DARKSKY_API_TOKEN environment
variable.

The location must be in the form lat,lon
(e.g. "51.450833,7.013056") and can be specified as a
command-line argument or via the DARKSKY_LOCATION
environment variable.
"""

from __future__ import print_function, absolute_import

import argparse
import json
import os
import sys
from urllib2 import urlopen

API_URL = ('https://api.darksky.net/forecast/{token}/{location}/?'
           'units=si&exclude=minutely,flags,daily,alerts')


def log(s, *args):
    """Simple STDERR logger."""
    if args:
        s = s % args
    print(s, file=sys.stderr)


def fetch_forecast(location, token):
    """Fetch all posts from Pinboard."""
    url = API_URL.format(location=location, token=token)
    return json.loads(httpget(url))


def httpget(url):
    """Return raw response data of HTTP call."""
    log('Fetching %s ...', url)
    r = urlopen(url)
    code = r.getcode()
    log('[%d] %s', code, url)
    return r.read()


def parse_args():
    """Parse CLI args and return options."""
    p = argparse.ArgumentParser(description=__doc__)
    p.add_argument('-t', '--token',
                   default=os.getenv('DARKSKY_API_TOKEN'),
                   help='DarkSky API token')
    p.add_argument('-l', '--location',
                   default=os.getenv('DARKSKY_LOCATION'),
                   help='location to fetch forecast for')
    p.add_argument('target', help='File to write output to', nargs='?')

    args = p.parse_args()
    if not args.token:
        p.error('API token not set. Use --token or '
                'set DARKSKY_API_TOKEN environment variable.')

    if not args.location:
        p.error('Location not set. Use --location or '
                'set DARKSKY_LOCATION environment variable.')

    if args.target == '-':  # STDOUT
        args.target = None

    return args


def main():
    """Run script."""
    args = parse_args()
    data = fetch_forecast(args.location, args.token)

    if not args.target:
        json.dump(data, sys.stdout, sort_keys=True, indent=2,
                  separators=(',', ': '))
    else:
        with open(args.target, 'wb') as fp:
            json.dump(data, fp, sort_keys=True, indent=2,
                      separators=(',', ': '))

        log('Wrote forecast to %s', args.target)

    return 0


if __name__ == '__main__':
    sys.exit(main())
