// Generated by CoffeeScript 1.10.0
(function() {
  (function($) {})(jQuery);

  this.Weather = (function() {
    function Weather() {

      /*
                                 .8888b oo
                                 88   "
      .d8888b. .d8888b. 88d888b. 88aaa  dP .d8888b.
      88'  `"" 88'  `88 88'  `88 88     88 88'  `88
      88.  ... 88.  .88 88    88 88     88 88.  .88
      `88888P' `88888P' dP    dP dP     dP `8888P88
                                                .88
                                            d8888P
       */
      this.weatherIconClassMapping = {
        'rain': 'wi-rain',
        'snow': 'wi-snow',
        'fog': 'wi-fog',
        'cloudy': 'wi-cloudy',
        'wind': 'wi-windy',
        'clear-day': 'wi-day-sunny',
        'mostly-clear-day': 'wi-day-sunny-overcast',
        'partly-cloudy-day': 'wi-day-cloudy',
        'clear-night': 'wi-night-clear',
        'partly-cloudy-night': 'wi-night-cloudy',
        'unknown': 'wi-cloud-refresh'
      };
      this.beaufortWindSpeedMapping = {
        0: 1.1,
        1: 5.5,
        2: 11.9,
        3: 19.7,
        4: 28.7,
        5: 38.8,
        6: 49.9,
        7: 61.8,
        8: 74.6,
        9: 88.1,
        10: 102.4,
        11: 117.4
      };
    }

    Weather.prototype.run = function() {
      console.log('[weather] running ...');
      $('.percent.value').each((function(_this) {
        return function(i, e) {
          var p, pc;
          p = $(e).data('percent');
          pc = (p * 100).toFixed(0) + '%';
          return $(e).html(pc);
        };
      })(this));
      $('li.forecast').each((function(_this) {
        return function(i, li) {
          li = $(li);
          if (li.attr('id') === 'current') {
            return;
          }
          return li.find('h3').each(function(i, h3) {
            var d, s;
            h3 = $(h3);
            s = h3.data('summary');
            d = _this.timestampToDate(h3.data('time'));
            return h3.find('span.time').html(_this.formatDate(d));
          });
        };
      })(this));
      $('.forecast>.temp').each((function(_this) {
        return function(i, div) {
          var t;
          div = $(div);
          t = div.data('temp');
          i = t.toFixed(0);
          if (i === '-0') {
            i = 0;
          }
          return div.find('.value').html(i);
        };
      })(this));
      $('.forecast>.precipitation').each((function(_this) {
        return function(i, div) {
          div = $(div);
          if (div.data('probability') === 0) {
            return div.html('dry');
          }
        };
      })(this));
      return $('.forecast>.wind').each((function(_this) {
        return function(i, div) {
          var b, s;
          div = $(div);
          b = div.data('wind-bearing');
          s = div.data('wind-speed');
          console.log('[weather/wind] speed=' + s + ' m/s, bearing=' + b);
          return div.find('.speed').html(_this.metresPerSecondToKph(s) + ' kph');
        };
      })(this));
    };


    /*
          dP            dP
          88            88
    .d888b88 .d8888b. d8888P .d8888b.
    88'  `88 88'  `88   88   88'  `88
    88.  .88 88.  .88   88   88.  .88
    `88888P8 `88888P8   dP   `88888P8
     */

    Weather.prototype.sortNumber = function(a, b) {
      return a - b;
    };

    Weather.prototype.sortEvents = function(e1, e2) {
      return e1.time - e2.time;
    };

    Weather.prototype.getWeatherIconClass = function(data) {
      if (!data) {
        return this.weatherIconClassMapping['unknown'];
      }
      if (data.icon.indexOf('cloudy') > -1) {
        if (data.cloudCover < 0.25) {
          return this.weatherIconClassMapping["clear-day"];
        } else if (data.cloudCover < 0.5) {
          return this.weatherIconClassMapping["mostly-clear-day"];
        } else if (data.cloudCover < 0.75) {
          return this.weatherIconClassMapping["partly-cloudy-day"];
        } else {
          return this.weatherIconClassMapping["cloudy"];
        }
      } else {
        return this.weatherIconClassMapping[data.icon];
      }
    };

    Weather.prototype.getMoonIconClass = function(data) {
      var i, j, key, len, phase, phases, thisPhase;
      phases = (function() {
        var results;
        results = [];
        for (key in this.moonIconClassMapping) {
          results.push(key);
        }
        return results;
      }).call(this);
      phases.sort();
      thisPhase = null;
      for (i = j = 0, len = phases.length; j < len; i = ++j) {
        phase = phases[i];
        if (data.moonPhase === phase) {
          thisPhase = phase;
          break;
        }
        if (data.moonPhase < phase) {
          thisPhase = phase;
          break;
        }
      }
      if (thisPhase) {
        console.log('Moon phase : ' + thisPhase);
        return this.moonIconClassMapping[thisPhase];
      }
      return '';
    };

    Weather.prototype.getWindDirectionIconClass = function(data) {
      return "wi-wind-default from-" + data.windBearing + "-deg";
    };

    Weather.prototype.getWindForce = function(data) {
      var j, key, len, limit, numbers, scaleNo, windForce, windSpeed;
      numbers = (function() {
        var results;
        results = [];
        for (key in this.beaufortWindSpeedMapping) {
          results.push(key);
        }
        return results;
      }).call(this);
      windSpeed = data.windSpeed * 3.6;
      windForce = null;
      for (j = 0, len = numbers.length; j < len; j++) {
        scaleNo = numbers[j];
        limit = this.beaufortWindSpeedMapping[scaleNo];
        if (windSpeed <= limit) {
          windForce = scaleNo;
          break;
        }
      }
      if (windForce === null) {
        windForce = 12;
      }
      return windForce;
    };

    Weather.prototype.getWindForceIconClass = function(data) {
      var windForce;
      windForce = this.getWindForce(data);
      return "wi-beaufort-" + windForce;
    };

    Weather.prototype.getRainProbability = function(data) {
      if (data.precipProbability === 0) {
        return 'dry';
      }
      return (data.precipProbability * 100).toFixed(0) + '%';
    };

    Weather.prototype.getRainIntensity = function(data) {
      var intensity;
      if (data.precipProbability === 0) {
        return '';
      }
      intensity = 'v. light';
      if (data.precipIntensity > 0.017) {
        intensity = 'light';
      }
      if (data.precipIntensity > 0.1) {
        intensity = 'moderate';
      }
      if (data.precipIntensity > 0.4) {
        intensity = 'heavy';
      }
      return intensity;
    };

    Weather.prototype.getWarnings = function(data) {

      /*
      Returns list of objects:
      
      w:
        type: 'rain' or 'wind'
        level: 1-5 for rain, 0-12 for wind
       */
      var i, level, p, w, warnings, windForce;
      warnings = [];
      level = 0;
      p = data.precipProbability;
      i = data.precipIntensity;
      if (p >= 0.9) {
        level = 5;
      } else if (p >= 0.7) {
        level = 4;
      } else if (p >= 0.5) {
        level = 3;
      } else if (p >= 0.3) {
        level = 2;
      } else if (p >= 0.1) {
        level = 1;
      }
      if (i < 0.017) {
        level -= 1;
      } else if (i > 0.4) {
        level += 2;
      } else if (i > 0.2) {
        level += 1;
      }
      if (level > 5) {
        level = 5;
      }
      if (level > 0) {
        w = {
          type: 'rain',
          level: level
        };
        warnings.push(w);
      }
      windForce = this.getWindForce(data);
      if (windForce > 2) {
        w = {
          type: 'wind',
          level: windForce
        };
        warnings.push(w);
      }
      return warnings;
    };

    Weather.prototype.getRainDangerLevel = function(data) {
      var j, len, ref, w;
      ref = this.getWarnings(data);
      for (j = 0, len = ref.length; j < len; j++) {
        w = ref[j];
        if (w.type === 'rain') {
          return w.level;
        }
      }
      return 0;
    };

    Weather.prototype.getWindDangerLevel = function(data) {
      var j, len, ref, w;
      ref = this.getWarnings(data);
      for (j = 0, len = ref.length; j < len; j++) {
        w = ref[j];
        if (w.type === 'wind') {
          return w.level;
        }
      }
      return 0;
    };

    Weather.prototype.getWind = function(data) {
      var windSpeed;
      windSpeed = data.windSpeed * 3.6;
      return windSpeed.toFixed(0) + ' kph';
    };

    Weather.prototype.timestampToDate = function(utcTime) {
      var date;
      date = new Date(0);
      date.setUTCSeconds(utcTime);
      return date;
    };

    Weather.prototype.formatDate = function(date) {
      return date.getHours() + ':' + '0' + date.getMinutes();
    };

    Weather.prototype.metresPerSecondToKph = function(n) {
      return (n * 3.6).toFixed(0);
    };


    /*
                                     dP                   oo
                                     88
    88d888b. .d8888b. 88d888b. .d888b88 .d8888b. 88d888b. dP 88d888b. .d8888b.
    88'  `88 88ooood8 88'  `88 88'  `88 88ooood8 88'  `88 88 88'  `88 88'  `88
    88       88.  ... 88    88 88.  .88 88.  ... 88       88 88    88 88.  .88
    dP       `88888P' dP    dP `88888P8 `88888P' dP       dP dP    dP `8888P88
                                                                           .88
                                                                       d8888P
     */

    Weather.prototype.renderIcon = function(cssClass) {
      return "<i class=\"wi " + cssClass + "\"></i>";
    };

    Weather.prototype.renderWind = function(data) {
      return "<div class=\"windbox\">\n  <div class=\"wind-direction\">" + (this.renderIcon(this.getWindDirectionIconClass(data))) + "</div>\n  <div class=\"wind-speed\">" + (this.getWind(data)) + "</div>\n</div>";
    };

    Weather.prototype.renderWindDaily = function(data) {
      return "<span class=\"wind-direction\">" + (this.renderIcon(this.getWindDirectionIconClass(data))) + "</span>\n<span class=\"wind-speed\">" + (this.getWind(data)) + "</span>";
    };

    Weather.prototype.renderWarnings = function(data) {
      var j, len, output, w, warnings;
      warnings = this.getWarnings(data);
      output = [];
      for (j = 0, len = warnings.length; j < len; j++) {
        w = warnings[j];
        if (w.type === 'rain') {
          output.push("<li class=\"warning rain-" + w.level + "\">" + (this.renderIcon('wi-rain')) + "</li>");
        } else if (w.type === 'wind') {
          output.push("<li class=\"warning\">" + (this.renderIcon(this.getWindForceIconClass(data))) + "</li>");
        }
      }
      if (output.length) {
        return "<ul class=\"warnings\">\n  " + (output.join('')) + "\n</ul>";
      } else {
        return "";
      }
    };

    return Weather;

  })();

  console.log('[weather] loaded');

}).call(this);
